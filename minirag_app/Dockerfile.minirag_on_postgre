# syntax=docker/dockerfile:1

########## Build stage ##########
FROM python:3.11-slim AS builder
WORKDIR /app

RUN apt-get update && apt-get install -y --no-install-recommends \
      build-essential curl pkg-config libssl-dev \
    && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
    && . "$HOME/.cargo/env" && rustup default stable \
    && rm -rf /var/lib/apt/lists/*

ENV PATH="/root/.cargo/bin:${PATH}"

# Copy minimal build context (キャッシュ効率)
COPY requirements.txt .
COPY setup.py .
COPY minirag ./minirag

RUN pip install --user --no-cache-dir -r requirements.txt \
 && pip install --user --no-cache-dir jupyter notebook \
 && pip install --user --no-cache-dir transformers torch sentence-transformers \
 && pip install --user --no-cache-dir openai nano-vectordb asyncpg psycopg "psycopg[binary]" \
 && pip install --user --no-cache-dir .

########## Runtime stage ##########
FROM python:3.11-slim
WORKDIR /app

COPY --from=builder /root/.local /root/.local
COPY --from=builder /app/minirag ./minirag
COPY --from=builder /app/setup.py .

ENV PATH="/root/.local/bin:${PATH}"

EXPOSE 8165
RUN mkdir -p /root/.jupyter

CMD ["jupyter", "notebook", "--ip=0.0.0.0", "--port=8165", "--no-browser", "--allow-root", "--NotebookApp.token=", "--NotebookApp.password="]